{"ast":null,"code":"import _defineProperty from \"D:\\\\udemy\\\\react\\\\crwn-clothing\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAwI1pMz5Ki2EPCQFH86C8_5J2ktLGfPFQ\",\n  authDomain: \"react-learning-db.firebaseapp.com\",\n  databaseURL: \"https://react-learning-db.firebaseio.com\",\n  projectId: \"react-learning-db\",\n  storageBucket: \"\",\n  messagingSenderId: \"512953182335\",\n  appId: \"1:512953182335:web:6de55f7edcda3db2\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  console.log('firebase.util: ');\n  console.log(additionalData);\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email,\n          photoURL = userAuth.photoURL;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        photoURL,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotsToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsuscribe = auth.onAuthStateChanged(userAuth => {\n      unsuscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider);\nexport default firebase;","map":{"version":3,"sources":["D:\\udemy\\react\\crwn-clothing\\client\\src\\firebase\\firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","photoURL","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotsToMap","collections","transformedCollections","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsuscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","facebookProvider","FacebookAuthProvider","signInWithFacebook"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAwI1pMz5Ki2EPCQFH86C8_5J2ktLGfPFQ\",\r\n    authDomain: \"react-learning-db.firebaseapp.com\",\r\n    databaseURL: \"https://react-learning-db.firebaseio.com\",\r\n    projectId: \"react-learning-db\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"512953182335\",\r\n    appId: \"1:512953182335:web:6de55f7edcda3db2\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    console.log('firebase.util: ');\r\n    console.log(additionalData);\r\n    if(!userAuth) return;    \r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n\r\n    if(!snapShot.exists)\r\n    {\r\n        const { displayName, email, photoURL } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                photoURL,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        } catch (error)\r\n        {\r\n            console.log('error creating user', error.message);\r\n        }\r\n    }\r\n\r\n    return userRef;\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    return await batch.commit();\r\n\r\n};\r\n\r\nexport const convertCollectionsSnapshotsToMap = (collections) => {\r\n    const transformedCollections = collections.docs.map(doc => {\r\n        const { title, items } = doc.data();\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title, \r\n            items\r\n        }\r\n    });\r\n\r\n    return transformedCollections.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection;\r\n        return accumulator;\r\n    }, {});\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsuscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsuscribe();\r\n            resolve(userAuth);\r\n        }, reject)\r\n    });\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\r\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider);\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}